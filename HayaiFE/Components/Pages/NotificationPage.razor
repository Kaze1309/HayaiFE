@page "/notification"

@using System.IO;
@using HayaiFE.Services;
@using HayaiFE.Data;
@using HayaiFE.Models;
@inject CreateExcel service
@inject ExamDataService examDataService

@inject Microsoft.JSInterop.IJSRuntime JS
@inject TeacherDataService TdService
@inject SummaryService SummaryService
@inject ExamBlockService EBService
@attribute [Authorize]

<MudText>OutSideBlock SeatNoSheet</MudText>
<MudButton Variant="Variant.Filled" OnClick="OutSideBlock">Download</MudButton>

<MudText>Teacher Block Allocation Sheet</MudText>
<MudButton Variant="Variant.Filled" OnClick="AssignedTeachers">Download</MudButton>


<MudText>NoticeBoard Sheet</MudText>
<MudButton Variant="Variant.Filled" OnClick="NoticeBoardSheet">Download</MudButton>

<MudText>Attendance Sheet</MudText>
<MudButton Variant="Variant.Filled">Download</MudButton>
@code {
    MemoryStream excelStream;

    MemoryStream allotStream;
    MemoryStream noticeStream;
    public string OutSideBlockFile = "OutSideBlock.pdf";
    public string AssignmentFile = "AssignedTeachers.xlsx";
    public string NoticeBoardFile = "NoticeBoard.pdf";
    private async Task OutSideBlock()
    {

        int TotalStudents = examDataService.GetSavedExams().Sum(e => e.StudentCount);
        // Generate the document in a background thread
        excelStream = service.CreateDocument(examDataService.GetSavedExams(), TotalStudents , SummaryService.GetSummary() ,await EBService.GetAllBlocksAsync());

        // Convert to byte array and trigger download
        await JS.InvokeVoidAsync("saveAsFile", OutSideBlockFile, Convert.ToBase64String(excelStream.ToArray()));
    }

    private async Task AssignedTeachers()
    {
        allotStream = service.FinalReport(await EBService.GetAllBlocksAsync(), TdService.GetTeacherData());


    // Convert to byte array and trigger download
        await JS.InvokeVoidAsync("saveAsFile", AssignmentFile, Convert.ToBase64String(allotStream.ToArray()));

    }

    private async Task NoticeBoardSheet()
    {
        noticeStream = service.GenerateNoticeBoardReport(await EBService.GetAllBlocksAsync(), examDataService.GetSavedExams(),SummaryService.GetSummary());


        // Convert to byte array and trigger download
        await JS.InvokeVoidAsync("saveAsFile", NoticeBoardFile, Convert.ToBase64String(noticeStream.ToArray()));

    }
}