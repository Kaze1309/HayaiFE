@page "/upload"
@using HayaiFE.Models
@using HayaiFE.Services
@using HayaiFE.Data
@using Microsoft.AspNetCore.Hosting
@using System
@using System.IO
@attribute [Authorize]
@inject IWebHostEnvironment Environment
@inject ExamDataService ExamService

<h3 class="pb-2 py-4">For Student</h3>
<hr style="border: 2px solid black; margin-bottom:3rem;" />

<MudGrid Spacing="3">
    <MudItem md="12">
        <MudPaper Class="pa-4">
            <h3>Upload Seat Number Sheet</h3>
            <EditForm Model="examDetails" OnValidSubmit="SaveChanges">
                <DataAnnotationsValidator></DataAnnotationsValidator>

                <MudFileUpload @bind-Files="browserfile"
                               Class="pt-3"
                               T="IBrowserFile"
                               For="@(()=>browserfile)"
                               OnFilesChanged="LoadFiles"
                               Accept=".pdf">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload">
                            Browse Files
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>

                <MudSpacer />

                @if (exams != null && exams.Count > 0)
                {
                    <MudStack Style="width: 450px">
                        <MudSelect Variant="Variant.Outlined" Label="Select Subject"
                                   MultiSelection="true"
                                   @bind-SelectedValues="selectedSubjects"
                                   Class="">
                            @foreach (var subject in exams.SelectMany(e => e.ExtractedSubjects)
                        .DistinctBy(s => $"{s.Code}_{s.Name}_{s.Type}"))
                            {
                                var subjectDisplay = $"{subject.Code} {subject.Name} {subject.Type}";
                                <MudSelectItem Value="@subjectDisplay">@subjectDisplay</MudSelectItem>
                            }
                        </MudSelect>
                    </MudStack>
                        
                }

                <MudSpacer />

                <MudButton ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Class="mt-3">
                    Register
                </MudButton>
            </EditForm>
        </MudPaper>
    </MudItem>

    <MudItem md="12">
        <MudPaper Class="pa-4">
            <h3>Submitted Exams</h3>
            <ExamTable Exams="ExamService.GetSavedExams()" OnClear="ClearTableAndData" />
        </MudPaper>
    </MudItem>

    <MudItem md="12">
        <MudPaper Class="pa-4">
            <h3>For Teachers</h3>
            <MudFileUpload Class="pl-1 pt-3 pb-3" T="IBrowserFile">
                <ActivatorContent>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload">
                        Browse Files
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    BranchWiseExamDetails examDetails = new();
    CreateExcel extractFunction = new();

    private IEnumerable<string> selectedSubjects = new HashSet<string>{};
    public List<Subject> subjects = new();
    public Dictionary<string, List<string>> seatNumbers = new();
    public string year;
    public string branchName;
    public List<CreateExcel.ExamDetails> exams = new();
    public List<CreateExcel.ExamDetails> ExtractExamDetails { get; private set; } = new();

    //file upload related
    const int MAX_FILESIZE = 5000 * 1024; // 5MB
    public IBrowserFile? browserfile{ get; set; }

    private string uploadedFilePath = string.Empty; // Store file path globally

    private List<string> uploadedFilePaths = new(); // Store paths of uploaded files
    public string FilePath { get; set; }
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            try
            {
                var uploadFolder = Path.Combine(Environment.ContentRootPath, "unsafe_uploads");

                if (!Directory.Exists(uploadFolder))
                {
                    Directory.CreateDirectory(uploadFolder);
                }

                string uniqueFileName = $"{file.Name}";
                FilePath = Path.Combine(uploadFolder, uniqueFileName); // Ensure `filePath` is set

                await using FileStream fs = new(FilePath, FileMode.Create);
                await file.OpenReadStream(MAX_FILESIZE).CopyToAsync(fs);

                uploadedFilePaths.Add(FilePath);
                Console.WriteLine($"File saved at: {FilePath}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error saving file: {ex.Message}");
            }
        }

        // Process the uploaded file
        
        ExtractExamDetails = extractFunction.ExtractExamDetails(FilePath);

        ExamService.SetExamDetails(ExtractExamDetails);
        exams = ExamService.GetExamDetails();

        Console.WriteLine($"Exam details count: {exams.Count}");

        // Force UI Update
        await InvokeAsync(StateHasChanged);
    }

    private void SaveChanges()
    {
        if (selectedSubjects != null && selectedSubjects.Any() && ExtractExamDetails.Any())
        {
            foreach (var selectedSubject in selectedSubjects) // Iterate over all selected subjects
            {
                var selectedExam = ExtractExamDetails.FirstOrDefault(e =>
                    e.ExtractedSubjects.Any(s => $"{s.Code} {s.Name} {s.Type}" == selectedSubject));

                if (selectedExam != null)
                {
                    var subjectObj = selectedExam.ExtractedSubjects
                        .FirstOrDefault(s => $"{s.Code} {s.Name} {s.Type}" == selectedSubject);

                    if (subjectObj != null)
                    {
                        // Construct the correct key format
                        string subjectKey = $"{subjectObj.Code}_{subjectObj.Name}_{subjectObj.Type}";

                        int studentCount = selectedExam.ExtractedSeatNumbers.TryGetValue(subjectKey, out var seats)
                            ? seats.Count
                            : 0;

                        var savedExam = new SavedExamDetails
                            {
                                Subject = selectedSubject,
                                ExamYear = selectedExam.ExamYear,
                                StudentCount = studentCount,
                                ExamBranch = selectedExam.ExamBranch
                            };

                        ExamService.AddSavedExam(savedExam);
                    }
                }
            }
        }
    }

    private void ClearTableAndData()
    {
        ExamService.ClearSavedExams();
        StateHasChanged();
    }
}

